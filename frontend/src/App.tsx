import React, { useEffect, useMemo } from "react";
import useScreenType from "./hooks/useScreenType";
import Cookies from "js-cookie";
import "./App.scss";
import {
  createBrowserRouter,
  RouterProvider,
  Navigate,
} from "react-router-dom";
import { useUserStore } from "./store";
import ProtectedRoute from "./components/ProtectedRoute/ProtectedRoute"; //‰øùÊä§Ë∑ØÁî±ÔºåÊú™ÁôªÂΩïÂ∞ÜÂè™ËÉΩÂØºËà™Ëá≥loginÂíåregisterÈ°µÈù¢
import { message } from "antd";

// ÊáíÂä†ËΩΩÈ°µÈù¢ÁªÑ‰ª∂Áªü‰∏ÄÁÆ°ÁêÜ
const Lazy = {
  Market: React.lazy(() => import("./pages/Market/Market")),
  Detail: React.lazy(() => import("./pages/Market/Detail/Detail")),
  DetailAppeal: React.lazy(() => import("./pages/Market/Detail/DetailAppeal")),
  MarketPublishChoice: React.lazy(() => import("./pages/Publish/MarketPublish/MarketPublishChoice/MarketPublishChoice")),
  MarketPublish: React.lazy(() => import("./pages/Publish/MarketPublish/MarketPublish")),
  Template: React.lazy(() => import("./pages/Publish/MarketPublish/Template/Template")),
  Login: React.lazy(() => import("./pages/Auth/Login/Login")),
  Register: React.lazy(() => import("./pages/Auth/Register/Register")),
  Reset: React.lazy(() => import("./pages/User/Settings/Reset/Reset")),
  User: React.lazy(() => import("./pages/User/User")),
  Forum: React.lazy(() => import("./pages/Forum/Forum")),
  ForumDisable: React.lazy(() => import("./pages/ForumDisable/Forum")),
  Settings: React.lazy(() => import("./pages/User/Settings/Settings")),
  About: React.lazy(() => import("./pages/User/Settings/About/About")),
  Favorites: React.lazy(() => import("./pages/User/Favorites/Favorites")),
  Messages: React.lazy(() => import("./pages/User/Messages/Messages")),
  History: React.lazy(() => import("./pages/User/History/History")),
  Admin: React.lazy(() => import("./pages/Admin/Admin")),
  ForumPublish: React.lazy(() => import("./pages/Publish/ForumPublish/ForumPublish")),
  ForumDetail: React.lazy(() => import("./pages/Forum/ForumDetail/ForumDetail")),
  Dashboard: React.lazy(() => import("./pages/Admin/Dashboard/Dashboard")),
  AdminMessages: React.lazy(() => import("./pages/Admin/Messages/Messages")),
  AdminMarket: React.lazy(() => import("./pages/Admin/Market/Market")),
  AdminForum: React.lazy(() => import("./pages/Admin/Forum/Forum")),
};

const App: React.FC = () => {
  // Ê£ÄÊü•ÊòØÂê¶ÁôªÂΩïÂπ∂Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØ
  const token = Cookies.get("auth-token");

  // ‰ªÖÂú®ÁßªÂä®Á´ØÂºÄÂêØÁ´ñÂ±èÁõëÊéßÂíåÊèêÁ§∫
  useEffect(() => {
    const isMobile = window.innerWidth < 768;
    if (!isMobile) return;

    const lockOrientation = () => {
      if (window.screen.orientation && window.screen.orientation.lock) {
        window.screen.orientation.lock("portrait").catch((err) => {
          console.error("ÈîÅÂÆöÁ´ñÂ±èÂ§±Ë¥•:", err);
        });
      }
    };

    const handleOrientationChange = () => {
      if (window.matchMedia("(orientation: landscape)").matches) {
        message.info("ËØ∑Â∞ÜËÆæÂ§áÊóãËΩ¨Âà∞Á´ñÂ±èÊ®°Âºè‰ª•Ëé∑ÂæóÊúÄ‰Ω≥‰ΩìÈ™å„ÄÇ");
        lockOrientation();
      }
    };

    window.addEventListener("resize", handleOrientationChange);
    window.addEventListener("orientationchange", handleOrientationChange);

    // ÂàùÂßãÊ£ÄÊµã
    handleOrientationChange();

    return () => {
      window.removeEventListener("resize", handleOrientationChange);
      window.removeEventListener("orientationchange", handleOrientationChange);
    };
  }, []);

  useEffect(() => {
    // ‰ΩøÁî®AbortControllerÊèê‰æõÊõ¥Â•ΩÁöÑËØ∑Ê±ÇÂèñÊ∂àÊú∫Âà∂
    const abortController = new AbortController();
    const MAX_RETRIES = 3;
    const RETRY_DELAY = 1000; // ÈáçËØïÂª∂ËøüÊó∂Èó¥

    const fetchUserProfileWithRetry = async () => {
      for (let attempt = 0; attempt < MAX_RETRIES; attempt++) {
        // Ê£ÄÊü•ÊòØÂê¶Â∑≤Ë¢´ÂèñÊ∂à
        if (abortController.signal.aborted) {
          console.log("ËØ∑Ê±ÇÂ∑≤Ë¢´ÂèñÊ∂à");
          return;
        }

        try {
          console.log(`Â∞ùËØïËé∑ÂèñÁî®Êà∑‰ø°ÊÅØ (Á¨¨${attempt + 1}/${MAX_RETRIES}Ê¨°)`);
          
          // ‰º†ÈÄíabort‰ø°Âè∑ÁªôËØ∑Ê±ÇÔºàÂ¶ÇÊûúfetchUserProfileÊîØÊåÅÁöÑËØùÔºâ
          await useUserStore.getState().fetchUserProfile();
          
          console.log("‚úÖ Áî®Êà∑‰ø°ÊÅØËé∑ÂèñÊàêÂäü");
          return; // ÊàêÂäüÂêéÈÄÄÂá∫

        } catch (error) {
          const isLastAttempt = attempt === MAX_RETRIES - 1;
          
          console.error(`‚ùå Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥• (Á¨¨${attempt + 1}Ê¨°):`, error);

          // Â¶ÇÊûúÊòØÁΩëÁªúÈîôËØØ‰∏î‰∏çÊòØÊúÄÂêé‰∏ÄÊ¨°Â∞ùËØïÔºåÁªßÁª≠ÈáçËØï
          if (!isLastAttempt && !abortController.signal.aborted) {
            console.log(`‚è≥ ${RETRY_DELAY/1000}ÁßíÂêéÈáçËØï...`);
            
            // ÂèØË¢´‰∏≠Êñ≠ÁöÑÂª∂Ëøü
            await new Promise((resolve, reject) => {
              const timeoutId = setTimeout(resolve, RETRY_DELAY);
              abortController.signal.addEventListener('abort', () => {
                clearTimeout(timeoutId);
                reject(new Error('Request aborted'));
              });
            }).catch(() => {
              // Ë¢´‰∏≠Êñ≠Êó∂‰∏çÂÅö‰ªª‰ΩïÂ§ÑÁêÜ
              return;
            });
          }
        }
      }

      // ÊâÄÊúâÈáçËØïÂ§±Ë¥•ÂêéÁöÑÂ§ÑÁêÜ
      if (!abortController.signal.aborted) {
        console.error("üö´ ËææÂà∞ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ÔºåÁî®Êà∑‰ø°ÊÅØËé∑ÂèñÂ§±Ë¥•");
        
        // Ê£ÄÊü•ÊòØÂê¶ÊòØËÆ§ËØÅÈóÆÈ¢ò
        const isAuthError = !useUserStore.getState().currentUser;
        
        if (isAuthError) {
          message.error("ÁôªÂΩïÂ∑≤ËøáÊúüÔºåËØ∑ÈáçÊñ∞ÁôªÂΩï");
          Cookies.remove("auth-token");
          // ÂèØÈÄâÔºöÈáçÂÆöÂêëÂà∞ÁôªÂΩïÈ°µ
          setTimeout(() => {
            window.location.href = '/auth/login';
          }, 2000);
        } else {
          message.warning("Ëé∑ÂèñÁî®Êà∑‰ø°ÊÅØÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•");
        }
      }
    };

    // ‚úÖ Âè™ÊúâÂ≠òÂú®ÊúâÊïàtokenÊó∂ÊâçÂ∞ùËØïËé∑Âèñ
    if (token && token.trim()) {
      fetchUserProfileWithRetry();
    }

    // ‚úÖ Ê∏ÖÁêÜÂáΩÊï∞
    return () => {
      console.log("üßπ Ê∏ÖÁêÜÁî®Êà∑‰ø°ÊÅØËé∑ÂèñËØ∑Ê±Ç");
      abortController.abort();
    };
  }, [token]);


// Ë∑ØÁî±Ë°®ÊäΩÁ¶ª‰∏∫Â∏∏Èáè
const mobileRoutes = useMemo(() => [
  
  { path: "/auth/login", element: <Lazy.Login /> },
  { path: "/auth/register", element: <Lazy.Register /> },
  { path: "/user/settings/reset/:type", element: <Lazy.Reset /> },
  {
    path: "/user/settings/about",
    element: (
      <ProtectedRoute>
        <Lazy.About />
      </ProtectedRoute>
    ),
  },
  {
    path: "/market",
    element: (
      <ProtectedRoute>
        <Lazy.Market />
      </ProtectedRoute>
    ),
  },
  {
    path: "/market/:goodsId",
    element: (
      <ProtectedRoute>
        <Lazy.Detail />
      </ProtectedRoute>
    ),
  },
  {
    path: "/market/:goodsId/appeal/:goodsTitle",
    element: (
      <ProtectedRoute>
        <Lazy.DetailAppeal />
      </ProtectedRoute>
    ),
  },
  {
    path: "/forum",
    element: (
      <ProtectedRoute>
        <Lazy.Forum />
      </ProtectedRoute>
    ),
  },
  {
    path: "/forum-test",
    element: (
      <ProtectedRoute>
        <Lazy.ForumDisable />
      </ProtectedRoute>
    ),
  },
  {
    path: "/forum-detail",
    element: (
      // <ProtectedRoute>
        <Lazy.ForumDetail />
      // </ProtectedRoute>
    ),
  },
  {
    path: "/publish/market-publish-choice",
    element: (
      <ProtectedRoute>
        <Lazy.MarketPublishChoice />
      </ProtectedRoute>
    ),
  },
  {
    path: "/publish/market-publish-ai",
    element: (
      <ProtectedRoute>
        <Lazy.MarketPublish />
      </ProtectedRoute>
    ),
  },
  {
    path: "/publish/forum-publish",
    element: (
      <ProtectedRoute>
        <Lazy.ForumPublish />
      </ProtectedRoute>
    ),
  },
  {
    path: "/publish/market-publish-basic",
    element: (
      <ProtectedRoute>
        <Lazy.Template />
      </ProtectedRoute>
    ),
  },
  {
    path: "/user",
    element: (
      <ProtectedRoute>
        <Lazy.User />
      </ProtectedRoute>
    ),
  },
  {
    path: "/user/favorites",
    element: (
      <ProtectedRoute>
        <Lazy.Favorites />
      </ProtectedRoute>
    ),
  },
  {
    path: "/user/messages",
    element: (
      <ProtectedRoute>
        <Lazy.Messages />
      </ProtectedRoute>
    ),
  },
  {
    path: "/user/history",
    element: (
      <ProtectedRoute>
        <Lazy.History />
      </ProtectedRoute>
    ),
  },
  {
    path: "/user/settings",
    element: (
      <ProtectedRoute>
        <Lazy.Settings />
      </ProtectedRoute>
    ),
  },
  {
    path: "*",
    element: token ? (
      <Navigate to="/market" replace />
    ) : (
      <Navigate to="/auth/login" replace />
    ),
  },
], [token]);

const webRoutes = useMemo(() => [
  {
    path: "/admin",
    element: (
      <Lazy.Admin />
    ),
    children: [
      {
        index: true,
        element: <Lazy.Dashboard />,
      },
      {
        path: "messages",
        element: <Lazy.AdminMessages />,
      },
      {
        path: "market",
        element: <Lazy.AdminMarket />,
      },
      {
        path: "forum",
        element: <Lazy.AdminForum />,
      },
    ],
  },
  {
    path: "*",
    element: (
      <Navigate to="/admin" replace/>
    ),
  }
], [token]);

  const mobileRouter = useMemo(() => createBrowserRouter(mobileRoutes), [mobileRoutes]);
  const webRouter = useMemo(() => createBrowserRouter(webRoutes), [webRoutes]);

  const isMobile = useScreenType(768);
  console.log(useScreenType(768),isMobile);

  return (
    <div className="App">
      <React.Suspense fallback={<div>Âä†ËΩΩ‰∏≠......ËØ∑Á®çÂÄô......</div>}>
        <RouterProvider router={isMobile ? mobileRouter : webRouter} />
      </React.Suspense>
    </div>
  );
};

export default App;
